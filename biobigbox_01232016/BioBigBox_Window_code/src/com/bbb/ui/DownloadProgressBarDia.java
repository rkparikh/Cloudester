/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bbb.ui;

import com.amazonaws.services.s3.transfer.TransferProgress;
import com.bbb.init.Initialize;
import com.bbb.utils.TrayIconUtils;
import com.bbb.webservice.DownloadFiles;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;

/**
 *
 * @author Totaram
 */
/**
 * ProgressBarDia CLASS USE FOR SHOW PROGRESS BAR
 */
public class DownloadProgressBarDia extends javax.swing.JFrame {

    /**
     * Creates new form ProgressBarDia
     */
    final static Logger logger = Logger.getLogger(DownloadProgressBarDia.class);
    public static String downPrgressBarStatus; /*Progress Bar status Downloading and Uploading */


    public DownloadProgressBarDia(java.awt.Frame parent, boolean modal) {
        initComponents();
        
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((dim.width - this.getWidth()) / 2, (dim.height - this.getHeight()) / 2);
        downTextareamQueue.setEditable(false);
        downProgressSync.setStringPainted(true);
        setIconImage(TrayIconUtils.appIcon);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                int dialogResult = JOptionPane.showConfirmDialog(Initialize.mainAppFrame, "This will cancel all download files", "Warning", JOptionPane.WARNING_MESSAGE);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    try {
                        System.out.println("File Url " + DownloadProgressBarDia.downfileNameUrl.getText());
                        File file = new File(DownloadProgressBarDia.downfileNameUrl.getText());
                        DownloadFiles.tx.shutdownNow();
                        if (file.exists()) {
                            file.delete();
                        }
                    } catch (Exception e) {
                    }
                } else {
                    setVisible(true);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        downTextareamQueue =  new javax.swing.JTextArea();
        downfileNameUrl = new javax.swing.JLabel();
        downProgressSync = new javax.swing.JProgressBar(0,100);
        downFileCountLabel = new javax.swing.JLabel();
        playResumeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("bbbappversion"); // NOI18N
        setTitle(bundle.getString("bbb.app.version")); // NOI18N
        setResizable(false);

        downTextareamQueue.setColumns(20);
        downTextareamQueue.setLineWrap(true);
        downTextareamQueue.setRows(5);
        jScrollPane1.setViewportView(downTextareamQueue);

        downfileNameUrl.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        downfileNameUrl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/down.gif"))); // NOI18N

        downFileCountLabel.setFont(new java.awt.Font("Verdana", 3, 11)); // NOI18N
        downFileCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        playResumeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Stop.png"))); // NOI18N
        playResumeButton.setContentAreaFilled(false);
        playResumeButton.setFocusable(false);
        playResumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playResumeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(downFileCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downfileNameUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addComponent(downProgressSync, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(playResumeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(downfileNameUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playResumeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downProgressSync, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(downFileCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static boolean downloadStatus = false;
    private void playResumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playResumeButtonActionPerformed
        // TODO add your handling code here:
        if (DownloadFiles.download != null) {
            TransferProgress progress = DownloadFiles.download.getProgress();
            System.out.println("Progress " + progress.getBytesTransferred());

            if (!downloadStatus) {
//                long MB = 1024 * 1024;
//                if (progress.getBytesTransferred() < 1 * MB) {
//                    JOptionPane.showMessageDialog(null, "The download process can only be paused once the intital 1 MB of the file has been downloaded", "Warning", JOptionPane.WARNING_MESSAGE);
//                } else {
                    DownloadFiles.pauseDownload();
                    playResumeButton.setIcon(new javax.swing.ImageIcon(TrayIconUtils.playIcon));
                    downloadStatus = true;
                //}
            } else {
                playResumeButton.setIcon(new javax.swing.ImageIcon(TrayIconUtils.stopICon));
                DownloadFiles.resumeDownload();
                downloadStatus = false;
            }
        }
    }//GEN-LAST:event_playResumeButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel downFileCountLabel;
    public static javax.swing.JProgressBar downProgressSync;
    public static javax.swing.JTextArea downTextareamQueue;
    public static javax.swing.JLabel downfileNameUrl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton playResumeButton;
    // End of variables declaration//GEN-END:variables

}
