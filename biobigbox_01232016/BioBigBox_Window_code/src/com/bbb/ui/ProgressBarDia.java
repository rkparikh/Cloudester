/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bbb.ui;

import com.amazonaws.services.s3.transfer.TransferProgress;
import com.bbb.init.Initialize;
import com.bbb.utils.ProcessUtils;
import com.bbb.utils.TrayIconUtils;
import com.bbb.webservice.UploadFiles;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import org.apache.log4j.Logger;

/**
 *
 * @author Totaram
 */
/**
 * ProgressBarDia CLASS USE FOR SHOW PROGRESS BAR
 */
public class ProgressBarDia extends javax.swing.JFrame {

    /**
     * Creates new form ProgressBarDia
     */
    final static Logger logger = Logger.getLogger(ProgressBarDia.class);
    public static String prgressBarStatus; /*Progress Bar status Downloading and Uploading */


    public ProgressBarDia(java.awt.Frame parent, boolean modal) {
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                Initialize.progressBarVisible = false;
            }
        });
        initComponents();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((dim.width - this.getWidth()) / 2, (dim.height - this.getHeight()) / 2);
        textareamQueue.setEditable(false);
        prgressBarStatus = "Downloading";
        setIconImage(TrayIconUtils.appIcon);
        progressSync.setStringPainted(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textareamQueue =  new javax.swing.JTextArea();
        fileNameUrl = new javax.swing.JLabel();
        progressSync = new javax.swing.JProgressBar(0,100);
        stop = new javax.swing.JButton();
        fileCountLabel = new javax.swing.JLabel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("bbbappversion"); // NOI18N
        setTitle(bundle.getString("bbb.app.version")); // NOI18N
        setResizable(false);

        textareamQueue.setColumns(20);
        textareamQueue.setLineWrap(true);
        textareamQueue.setRows(5);
        jScrollPane1.setViewportView(textareamQueue);

        fileNameUrl.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        fileNameUrl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/down.gif"))); // NOI18N
        fileNameUrl.setAutoscrolls(true);

        stop.setBackground(new java.awt.Color(255, 255, 255));
        stop.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        stop.setForeground(new java.awt.Color(30, 144, 255));
        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Stop.png"))); // NOI18N
        stop.setBorder(null);
        stop.setBorderPainted(false);
        stop.setContentAreaFilled(false);
        stop.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        stop.setEnabled(false);
        stop.setFocusPainted(false);
        stop.setSelected(true);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        fileCountLabel.setFont(new java.awt.Font("Verdana", 3, 11)); // NOI18N
        fileCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(progressSync, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(fileNameUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1)
                    .addComponent(fileCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fileNameUrl, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progressSync, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stop, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed

        /*Download Pause and Resume*/
        if (SyncPanel.download && prgressBarStatus.equals("Downloading")) {
            SyncPanel.download = false;
            try {
                //DownloadFiles.pauseDownload();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            stop.setIcon(new javax.swing.ImageIcon(TrayIconUtils.playIcon));
        } else if (prgressBarStatus.equals("Downloading")) {
            SyncPanel.download = true;
            stop.setIcon(new javax.swing.ImageIcon(TrayIconUtils.stopICon));

            try {
                // DownloadFiles.resumeDownload();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        /*Upload Stop*/
        uploadStop();

    }//GEN-LAST:event_stopActionPerformed

    public static void uploadStop() {
        /*Upload Pause and Resume*/
        System.out.println("from pause inside");
        if (ProcessUtils.upload && prgressBarStatus.equals("Uploading")) {
            long MB = 1024 * 1024;
            TransferProgress progress = UploadFiles.upload.getProgress();
//            if (progress.getBytesTransferred() < 1 * MB) {
//                JOptionPane.showMessageDialog(null, "The upload process can only be paused once the intital 1 MB of the file has been uploaded", "Warning", JOptionPane.WARNING_MESSAGE);
//            } else {
            UploadFiles.pauseOperation();
            ProcessUtils.upload = false;
            stop.setIcon(new javax.swing.ImageIcon(TrayIconUtils.playIcon));
            TrayIconUtils.trayIcon("Sync1");
            // }

        } else if (prgressBarStatus.equals("Uploading")) {
            ProcessUtils.upload = true;
            stop.setIcon(new javax.swing.ImageIcon(TrayIconUtils.stopICon));
            TrayIconUtils.trayIcon("Sync");
            UploadFiles.resumeOperation();

        }
        System.out.println("Process ing Upload " + ProcessUtils.upload);
        TrayIconUtils.setApplicationIcon(); 

    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel fileCountLabel;
    public static javax.swing.JLabel fileNameUrl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JProgressBar progressSync;
    public static javax.swing.JButton stop;
    public static javax.swing.JTextArea textareamQueue;
    // End of variables declaration//GEN-END:variables

}
