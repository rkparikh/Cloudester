/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bbb.ui;

import com.bbb.bean.FileBean;
import com.bbb.dao.UpdateLogin;
import com.bbb.init.Initialize;
import com.bbb.utils.BBBUtils;
import com.bbb.utils.TrayIconUtils;
import com.bbb.webservice.DownloadFiles;
import java.awt.Desktop;
import java.io.File;
import java.net.URL;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.apache.log4j.Logger;

/**
 *
 * @author Totaram
 */
/**
 * SyncPanel CLASS USE FOR DOWNLOAD OR UPLOAD YES OR NO UI AND DEFAULT DIRECTORY
 */
public class SyncPanel extends javax.swing.JPanel {

    /**
     * Creates new form SyncPanel
     */
    final static Logger logger = Logger.getLogger(SyncPanel.class);
    public MainAppFrame mainAppFrame;
    public List<FileBean> filesList;
    public static Thread loaderProcess = null;
    public static Thread downloadProcess = null;

    public SyncPanel(MainAppFrame mainAppFrame) {
        initComponents();
        this.mainAppFrame = mainAppFrame;
        ok.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nothanks = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        clickhere = new javax.swing.JButton();
        ok = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(294, 507));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/biobigbox.png"))); // NOI18N

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cloud.png"))); // NOI18N

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Please select your default Directory");
        jLabel3.setAlignmentY(0.0F);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel4.setText("                         Location");
        jLabel4.setAlignmentY(0.0F);

        nothanks.setBackground(new java.awt.Color(30, 144, 255));
        nothanks.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        nothanks.setForeground(new java.awt.Color(255, 255, 255));
        nothanks.setText("Select default location *");
        nothanks.setBorder(null);
        nothanks.setBorderPainted(false);
        nothanks.setContentAreaFilled(false);
        nothanks.setOpaque(true);
        nothanks.setSelected(true);
        nothanks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nothanksActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel5.setText("Want to upgrade your account ?");
        jLabel5.setAlignmentY(0.0F);

        clickhere.setBackground(new java.awt.Color(255, 255, 255));
        clickhere.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        clickhere.setForeground(new java.awt.Color(30, 144, 255));
        clickhere.setText("Click here");
        clickhere.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(255, 255, 255), new java.awt.Color(30, 144, 255), new java.awt.Color(251, 255, 255), new java.awt.Color(30, 144, 255)));
        clickhere.setBorderPainted(false);
        clickhere.setContentAreaFilled(false);
        clickhere.setOpaque(true);
        clickhere.setSelected(true);
        clickhere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickhereActionPerformed(evt);
            }
        });

        ok.setBackground(new java.awt.Color(30, 144, 255));
        ok.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        ok.setForeground(new java.awt.Color(255, 255, 255));
        ok.setText("Ok");
        ok.setBorder(null);
        ok.setBorderPainted(false);
        ok.setContentAreaFilled(false);
        ok.setOpaque(true);
        ok.setSelected(true);
        ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clickhere, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nothanks, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(nothanks, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ok, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clickhere, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(32, 32, 32))
        );
    }// </editor-fold>//GEN-END:initComponents

    public static void stopDownload() {

        try {
            loaderProcess.stop();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    private void nothanksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nothanksActionPerformed
        // TODO add your handling code here:
          getDirectoryPath();
          
        if (Initialize.getDefaultDirectory() == null || Initialize.getDefaultDirectory().equals("")) {
            logger.info("Defalult Directory Not select ");
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                logger.error("SyncPanel nothanksActionPerformed Error " + e);

            }
            JOptionPane.showMessageDialog(mainAppFrame, "Please Select Default Directory ", "Error",
                    JOptionPane.ERROR_MESSAGE);
           
        } else  {
           ok.setVisible(true);
        } 

    }//GEN-LAST:event_nothanksActionPerformed


    private void clickhereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickhereActionPerformed
        try {
            Desktop.getDesktop().browse(new URL("https://biobigbox.com/#/page/pricing").toURI());
            logger.info("Click here Button action performed");
        } catch (Exception ex) {
            logger.error("Click here Button action performed  :" + ex);
        }
    }//GEN-LAST:event_clickhereActionPerformed

    private void okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okActionPerformed
        // TODO add your handling code here:
        nothanks.setText("Select default location *");
            BBBUtils.createDirectory(Initialize.getDefaultDirectory());
            UpdateLogin.updateDirectoryPath();
            mainAppFrame.setVisible(false);
            try {
                System.out.println("Before Tray icon change ");
                TrayIconUtils.trayIcon("Sync");
                System.out.println("After Tray Icon Change ");
                TrayIconUtils.synProcessUpload();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
    }//GEN-LAST:event_okActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clickhere;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    public static javax.swing.JButton nothanks;
    public static javax.swing.JButton ok;
    // End of variables declaration//GEN-END:variables

    /*Select Default Directory */
    public void getDirectoryPath() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Sync Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            //System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
            if (chooser.getSelectedFile() != null) {
                Initialize.setDefaultDirectory(chooser.getSelectedFile().toString());

                String labelText = String.format("<html><div WIDTH=%d>%s</div><html>", 200, chooser.getSelectedFile().toString());
                labelText = labelText.replace(File.separator, "\r" + File.separator);
                nothanks.setText(labelText);
                logger.info("Defalult Directory " + chooser.getSelectedFile().toString());
            }
        } else {
            logger.info("No Select Default Directory");

        }
    }
    public boolean loopstatus = true;

//    public class DownloadDiaThread implements Runnable {
//
//        public void run() {
//
//            try {
//                while (loopstatus) {
//                    Thread.sleep(20);
//                }
//            } catch (InterruptedException e) {
//                logger.error("DownloadDiaThread Error " + e);
//
//            }
//
//        }
//    }
    public static boolean download = true;

    /* DownloadProcessThread INNER CLASS FOR DOWNLOADING  */
    public class DownloadProcessThread implements Runnable {

        public void run() {
            try {
                while (download) {
                    if (filesList != null && filesList.size() > 0 && DownloadFiles.downLoadFromAmazon(filesList)) {
                        loopstatus = false;
                        download = false;
                        mainAppFrame.progressDialog.setVisible(false);
                        TrayIconUtils.trayIcon("Sync");
                        TrayIconUtils.synProcessUpload();
                        System.out.println("i am stop download sync process ");
                    } else {
                        loopstatus = false;
                        download = false;
                        mainAppFrame.progressDialog.setVisible(false);
                        TrayIconUtils.trayIcon("Sync");
                        TrayIconUtils.synProcessUpload();
                    }

                    Thread.sleep(20);
                }
            } catch (InterruptedException e) {
                logger.error("DownloadProcessThread Error " + e);
            }
        }
    }

}
