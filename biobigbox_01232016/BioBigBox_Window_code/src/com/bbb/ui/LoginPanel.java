/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bbb.ui;

import com.bbb.bean.LoginBean;
import com.bbb.dao.InsertEmailStatus;
import com.bbb.dao.InsertLogin;
import com.bbb.dao.SelectLogFileName;
import com.bbb.dao.SelectLogin;
import com.bbb.dao.UpdateLogin;
import com.bbb.init.Initialize;
import static com.bbb.main.Main.currDate;
import static com.bbb.main.Main.dateFormat;
import static com.bbb.main.Main.logFileName;
import static com.bbb.ui.SyncPanel.ok;
import com.bbb.utils.BBBUtils;
import com.bbb.utils.TrayIconUtils;
import com.bbb.webservice.WebServices;
import java.awt.CardLayout;
import java.awt.Desktop;
import java.io.File;
import java.net.URL;
import org.apache.log4j.Logger;
import org.jdesktop.swingx.prompt.PromptSupport;

/**
 *
 * @author Totaram
 */
/**
 * LoginPanel CLASS USE FOR LOGIN UI
 */
public class LoginPanel extends javax.swing.JPanel {

    /**
     * Creates new form LoginPanel
     */
    public MainAppFrame mainAppFrame;
    final static Logger logger = Logger.getLogger(LoginPanel.class);
    public String userNameString;
    public String passwordString;
    boolean loopstatus = true;
    public static Thread loginProcess;

    public LoginPanel(MainAppFrame mainFrame) {
        initComponents();
        mainAppFrame = mainFrame;
        //Error Icon Hide 
        credentialError.setVisible(false);
        // forgot.setVisible(true);

        PromptSupport.setPrompt(" User Name *", userName);
        PromptSupport.setPrompt(" Password *", password);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIDE_PROMPT, userName);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.HIGHLIGHT_PROMPT, userName);
        PromptSupport.setFocusBehavior(PromptSupport.FocusBehavior.SHOW_PROMPT, userName);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        credentialError = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        login = new javax.swing.JButton();
        Signup = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        forgot = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/biobigbox.png"))); // NOI18N

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cloud.png"))); // NOI18N

        credentialError.setBackground(new java.awt.Color(255, 255, 255));
        credentialError.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        credentialError.setForeground(new java.awt.Color(255, 0, 51));
        credentialError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        credentialError.setText("Please Enter Correct credential ");
        credentialError.setToolTipText("Error");
        credentialError.setAlignmentY(0.0F);

        userName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        userName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        userName.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(30, 144, 255), new java.awt.Color(255, 255, 255)));
        userName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userNameFocusGained(evt);
            }
        });

        password.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        password.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        password.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(30, 144, 255), java.awt.Color.white));
        password.setName(""); // NOI18N
        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });
        password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFocusGained(evt);
            }
        });

        login.setBackground(new java.awt.Color(30, 144, 255));
        login.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        login.setForeground(new java.awt.Color(255, 255, 255));
        login.setText("Login");
        login.setAlignmentX(0.5F);
        login.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        login.setBorderPainted(false);
        login.setContentAreaFilled(false);
        login.setOpaque(true);
        login.setSelected(true);
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        Signup.setBackground(new java.awt.Color(30, 144, 255));
        Signup.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        Signup.setForeground(new java.awt.Color(255, 255, 255));
        Signup.setText("Signup ");
        Signup.setBorder(null);
        Signup.setContentAreaFilled(false);
        Signup.setOpaque(true);
        Signup.setSelected(true);
        Signup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignupActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("<html><p>Please login with your BioBigBox username and password, or press Signup to create an account.</p></html>");
        jLabel6.setAlignmentY(0.0F);

        forgot.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        forgot.setForeground(new java.awt.Color(51, 153, 255));
        forgot.setText("Forgot password ?");
        forgot.setBorder(null);
        forgot.setBorderPainted(false);
        forgot.setContentAreaFilled(false);
        forgot.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        forgot.setRequestFocusEnabled(false);
        forgot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Signup, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(33, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                                .addComponent(forgot, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(userName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(credentialError, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(credentialError)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Signup, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(forgot, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(68, 68, 68)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(446, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        userNameString = userName.getText().trim();
        passwordString = password.getText();
        mainAppFrame.syncPanel.nothanks.setText("Select default location *");
        ok.setVisible(false);
        if (userNameString.trim().equals("") && passwordString.trim().equals("")) {
            credentialError.setText("All fields are mandatory");
            setUserBorderWithError();
            setPasswordBorderWithError();
            credentialError.setVisible(true);
        } else if (userNameString.trim().equals("")) {
            credentialError.setText("Username is mandatory.Please enter");
            setUserBorderWithError();
            credentialError.setVisible(true);
        } else if (passwordString.trim().equals("")) {
            credentialError.setText("Password is mandatory.Please enter");
            setPasswordBorderWithError();
            credentialError.setVisible(true);
        } else {

            try {
                loopstatus = true;
                CardLayout cardLayout = (CardLayout) mainAppFrame.getContentPane().getLayout();
                cardLayout.show(mainAppFrame.getContentPane(), "processingPanel");
                loginProcess = new Thread(new LoginCheckThread());
                loginProcess.start();

                // cardLayout.show(mainAppFrame.getContentPane(), "processingPanel");
            } catch (Exception exception) {
                logger.error("Login loginActionPerformed Error :" + exception);
            }
        }

    }//GEN-LAST:event_loginActionPerformed

    private void setUserBorderWithoutError() {
        userName.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(254, 254, 255), new java.awt.Color(30, 144, 255), new java.awt.Color(30, 144, 255), new java.awt.Color(217, 239, 255)));
    }

    private void setUserBorderWithError() {
        userName.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(254, 254, 255), new java.awt.Color(204, 0, 51), new java.awt.Color(204, 0, 51), new java.awt.Color(217, 239, 255)));
    }

    private void setPasswordBorderWithoutError() {
        password.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(254, 254, 255), new java.awt.Color(30, 144, 255), new java.awt.Color(30, 144, 255), new java.awt.Color(217, 239, 255)));
    }

    private void setPasswordBorderWithError() {
        password.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(254, 254, 255), new java.awt.Color(204, 0, 51), new java.awt.Color(204, 0, 51), new java.awt.Color(217, 239, 255)));
    }

    private void SignupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignupActionPerformed
        try {
            Desktop.getDesktop().browse(new URL("https://biobigbox.com/#/register").toURI());
            logger.info("Account");
        } catch (Exception ex) {
            logger.error("Register   :" + ex);
        }
    }//GEN-LAST:event_SignupActionPerformed

    private void userNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userNameFocusGained
        credentialError.setVisible(false);
        setUserBorderWithoutError();
        //forgot.setVisible(false);
    }//GEN-LAST:event_userNameFocusGained

    private void passwordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFocusGained
        // TODO add your handling code here:
        credentialError.setVisible(false);
        setPasswordBorderWithoutError();
        // forgot.setVisible(false);
    }//GEN-LAST:event_passwordFocusGained

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        userNameString = userName.getText().trim();
        passwordString = password.getText();
        mainAppFrame.syncPanel.nothanks.setText("Select default location *");;
        ok.setVisible(false);
        if (userNameString.trim().equals("") && passwordString.trim().equals("")) {
            credentialError.setText("All fields are mandatory");
            setUserBorderWithError();
            setPasswordBorderWithError();
            credentialError.setVisible(true);
        } else if (userNameString.trim().equals("")) {
            credentialError.setText("Username is mandatory.Please enter");
            setUserBorderWithError();
            credentialError.setVisible(true);
        } else if (passwordString.trim().equals("")) {
            credentialError.setText("Password is mandatory.Please enter");
            setPasswordBorderWithError();
            credentialError.setVisible(true);
        } else {
            try {
                loopstatus = true;
                CardLayout cardLayout = (CardLayout) mainAppFrame.getContentPane().getLayout();
                cardLayout.show(mainAppFrame.getContentPane(), "processingPanel");
                loginProcess = new Thread(new LoginCheckThread());
                loginProcess.start();
//                 long start = System.currentTimeMillis();                             
//                long end = start + 60 * 1000 ;
//                if(System.currentTimeMillis() == end){
//                    loginProcess.stop();
//                }

                // cardLayout.show(mainAppFrame.getContentPane(), "processingPanel");
            } catch (Exception exception) {
                logger.error("Login loginActionPerformed Error :" + exception);
            }
        }
    }//GEN-LAST:event_passwordActionPerformed

    private void forgotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forgotActionPerformed
        // TODO add your handling code here:
        try {
            Desktop.getDesktop().browse(new URL("https://biobigbox.com/#/forgot-password").toURI());
            logger.info("Account");
        } catch (Exception ex) {
            logger.error("Account  :" + ex);
        }
    }//GEN-LAST:event_forgotActionPerformed

    public static void stopLoginThread() {
        try {
            loginProcess.stop();
        } catch (Exception e) {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Signup;
    public static javax.swing.JLabel credentialError;
    public static javax.swing.JButton forgot;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton login;
    public static javax.swing.JPasswordField password;
    public static javax.swing.JTextField userName;
    // End of variables declaration//GEN-END:variables

    /**
     * LoginCheckThread INNER CLASS USE FOR LOGIN CHECK
     */
    public class LoginCheckThread implements Runnable {

        boolean loginStatus = false;
        CardLayout cardLayout = (CardLayout) mainAppFrame.getContentPane().getLayout();

        public void run() {

            try {
                while (loopstatus) {
                    if (WebServices.loginCheck(userNameString, passwordString)) {
                        if (Initialize.getLoginToken() != null && !Initialize.getLoginToken().equals("")) {
                            LoginBean loginBean = new LoginBean();
                            loginBean.setPassword(passwordString);
                            loginBean.setUsername(userNameString);
                            LoginBean alreadyLoginBean = SelectLogin.getLoginAlready(loginBean);
                            alreadyLoginBean.setToken(Initialize.getLoginToken());
                            if (alreadyLoginBean != null && alreadyLoginBean.getDirectorypath() != null && !alreadyLoginBean.getDirectorypath().equals("")) {

                                if (Initialize.getDefaultDirectory() == null || Initialize.getDefaultDirectory().equals("")) {
                                    InsertLogin.insertLoginWithDirectory(alreadyLoginBean);
                                    Initialize.setDefaultDirectory(alreadyLoginBean.getDirectorypath());
                                } else {
                                    alreadyLoginBean.setDirectorypath(Initialize.getDefaultDirectory());
                                    InsertLogin.insertLoginWithDirectory(alreadyLoginBean);
                                }
                                try {

                                    if (SelectLogFileName.getLogFilePath().equals(logFileName)) {
                                        //System.out.println("inside if log file");
                                    }
                                    if (SelectLogFileName.getLogFilePath().equals("true")) {

                                        InsertEmailStatus.insertEmailStatus(Initialize.getUsername(), 0, Initialize.getLoginToken(), logFileName);
                                        System.out.println("filename:" + logFileName);
                                    }
                                    String getLogFileNameFromDB = SelectLogFileName.getLogFilePath();
                                    String getDateInfo[] = getLogFileNameFromDB.split("dailyLogs");
                                    String getDate[] = getDateInfo[1].split(".txt");
                                    if (dateFormat.format(currDate).equals(getDate[0])) {

                                    } else {
                                        if (!getLogFileNameFromDB.equals("") || getLogFileNameFromDB.equals("false")) {
                                            System.out.println("inside one day mail");
                                            File f = new File(getLogFileNameFromDB);
                                            if (f.length() == 0) {
//                                    System.out.println("before write file");
//                                    try {
//                                        FileWriter fw = new FileWriter(f);
//                                        fw.write("Dear User,\nYou did not upload any file on " + getDateInfo[1] + "");
//                                        fw.close();
//                                        System.out.println("after write file");
//                                        WebServices.sendLogsEmail(f);
//                                    } catch (IOException ex) {
//
//                                    }

                                            } else {

                                                WebServices.sendLogsEmail(f);
                                            }
                                        }
                                    }

                                } catch (NullPointerException e) {

                                }

                                WebServices.getAmazonKeys();
                                mainAppFrame.setVisible(false);
                                TrayIconUtils.trayIcon("Sync");
                                TrayIconUtils.synProcessUpload();
                                // JOptionPane.showMessageDialog(null, "You have successfully logged into your BioBigBox account.", "BBB Backup App", JOptionPane.INFORMATION_MESSAGE, TrayIconUtils.appImageIcon);
                                try {
                                    Desktop.getDesktop().browse(new URL("http://biobigbox.com/#/desktop-login-success").toURI());
                                    logger.info("BBB Account Error");
                                } catch (Exception ex) {
                                    logger.error("BBB Account Error :" + ex);
                                }
                                loopstatus = false;
                            } else {
                                InsertLogin.insertLogin(loginBean.getUsername(), loginBean.getPassword(), Initialize.getLoginToken());
                                TrayIconUtils.trayIcon("SignOutWithoutDirectory");
                                BBBUtils.createDirectory(System.getProperty("user.home") + File.separator + "BBBSyncDirectory");
                                if (Initialize.getDefaultDirectory() == null || Initialize.getDefaultDirectory().equals("")) {
                                    Initialize.setDefaultDirectory(System.getProperty("user.home") + File.separator + "BBBSyncDirectory");
                                }
                                // cardLayout.show(mainAppFrame.getContentPane(), "syncPanel");
                                UpdateLogin.updateDirectoryPath();
                                try {
                                    if (SelectLogFileName.getLogFilePath().equals(logFileName)) {

                                    } else {
                                        InsertEmailStatus.insertEmailStatus(Initialize.getUsername(), 0, Initialize.getLoginToken(), logFileName);
                                        System.out.println("filename:" + logFileName);
                                    }
                                } catch (NullPointerException e) {

                                }
                               try {

                                    if (SelectLogFileName.getLogFilePath().equals(logFileName)) {
                                        //System.out.println("inside if log file");
                                    }
                                    if (SelectLogFileName.getLogFilePath().equals("true")) {

                                        InsertEmailStatus.insertEmailStatus(Initialize.getUsername(), 0, Initialize.getLoginToken(), logFileName);
                                        System.out.println("filename:" + logFileName);
                                    }
                                    String getLogFileNameFromDB = SelectLogFileName.getLogFilePath();
                                    String getDateInfo[] = getLogFileNameFromDB.split("dailyLogs");
                                    String getDate[] = getDateInfo[1].split(".txt");
                                    if (dateFormat.format(currDate).equals(getDate[0])) {

                                    } else {
                                        if (!getLogFileNameFromDB.equals("") || getLogFileNameFromDB.equals("false")) {
                                            System.out.println("inside one day mail");
                                            File f = new File(getLogFileNameFromDB);
                                            if (f.length() == 0) {
//                                    System.out.println("before write file");
//                                    try {
//                                        FileWriter fw = new FileWriter(f);
//                                        fw.write("Dear User,\nYou did not upload any file on " + getDateInfo[1] + "");
//                                        fw.close();
//                                        System.out.println("after write file");
//                                        WebServices.sendLogsEmail(f);
//                                    } catch (IOException ex) {
//
//                                    }

                                            } else {

                                                WebServices.sendLogsEmail(f);
                                            }
                                        }
                                    }

                                } catch (NullPointerException e) {

                                }
                                WebServices.getAmazonKeys();
                                TrayIconUtils.trayIcon("Sync");
                                TrayIconUtils.synProcessUpload();
                                mainAppFrame.setVisible(false);
                                //JOptionPane.showMessageDialog(null, "Congratulations!", "BBB Bakup App", JOptionPane.INFORMATION_MESSAGE, TrayIconUtils.appImageIcon);
                                try {
                                    Desktop.getDesktop().browse(new URL("http://biobigbox.com/#/desktop-login-success").toURI());
                                    logger.info("Account");
                                } catch (Exception ex) {
                                    logger.error("Account  :" + ex);
                                }
                                loopstatus = false;
                                stopLoginThread();

                            }
                        }

                    } else {
                        cardLayout.show(mainAppFrame.getContentPane(), "loginPanel");
                        loopstatus = false;
                        credentialError.setVisible(true);
                        stopLoginThread();
                    }
                    Thread.sleep(8000);
                }
            } catch (InterruptedException e) {
                logger.error("LoginCheckThread Error :" + e);
            }

        }
    }

    /**
     * LoginProcessThread INNER CLASS USE FOR LOGIN PROCESSING LOADING
     */
    public class LoginProcessThread implements Runnable {

        CardLayout cardLayout = (CardLayout) mainAppFrame.getContentPane().getLayout();

        public void run() {
            try {
                while (loopstatus) {
                    cardLayout.show(mainAppFrame.getContentPane(), "processingPanel");
                    Thread.sleep(8000);
                }
            } catch (InterruptedException e) {
                logger.error("LoginProcessThread Error :" + e);
            }
        }
    }

}
